var $ = require("jquery");
var promise = require("es6-promise");
var Web3 = require("web3");
var Hash = require("../lib/sha.js");
var resourceUrl = "http://localhost:7777/api/game";
var web3 = new Web3();
var myContract;


    // solidity code code
    console.log("Setting up WEB3.js");
    web3.setProvider(new web3.providers.HttpProvider("http://localhost:8545"));
    console.log("set up WEB3.js");
    var version = web3.version.node;
    console.log("node versionv"+version);
    web3._extend({
        property: 'admin',
        methods: [new web3._extend.Method({
            name: 'getBalance',
            call: 'eth_getBalance',
            params: 2,
            inputFormatter: [web3._extend.utils.toAddress, web3._extend.formatters.inputDefaultBlockNumberFormatter],
            outputFormatter: web3._extend.formatters.outputBigNumberFormatter
        })]
    });
    web3._extend({
        property: 'personal',
        methods: [new web3._extend.Method({
            name: 'unlockAccount',
            call: 'personal_unlockAccount',
            params: 3,
            inputFormatter: [web3._extend.formatters.formatInputString,web3._extend.formatters.formatInputString,web3._extend.formatters.formatInputInt],
            outputFormatter: web3._extend.formatters.formatOutputBool

        })]
    });
    web3._extend({
        property: 'personal',
            methods: [new web3._extend.Method({
                name: 'listAccounts',
                call: 'personal_listAccounts',
                params: 0,
                inputFormatter: [],
                outputFormatter: function(obj) { return obj; }
            })]
    });

    //As per JimmyB's idea, this should be re-written to pull form Git repo
    var sourceContract = {
    contractCode:"Null",
        init: function () {
            $.ajax({
                url: "./gameContract.sol",
                async: false,
                success: function (data){
                    sourceContract.fileContents = data;
                }
            });
        }
    };
    function compileContract(game){
        sourceContract.init(); 
        var source = sourceContract.fileContents;
        var compiled = web3.eth.compile.solidity(source);
        // contract json abi, this is autogenerated using solc CLI
        
        createExampleContract(compiled, game);
    }
    
    function createExampleContract(compiled,game) {
        // hide create button
        //document.getElementById('create').style.visibility = 'hidden'; 
        //document.getElementById('code').innerText = code;
        // let's assume that coinbase is our account
        var version = web3.version.api;
        console.log(version);
        web3.eth.defaultAccount = web3.eth.coinbase;
        web3.personal.unlockAccount(web3.eth.accounts[0], 'password', 9000);
        // create contract
        console.log("transaction sent, waiting for confirmation");
        primaryAddress = web3.eth.accounts[0];
        var compiledGame = compiled.Game;
        var compiledUKGF = compiled.ukgf;
        var compiledGameCode = compiledGame.code;
        var compiledUKGFCode = compiledUKGF.code;
        var compiledGameAbi = compiledGame.info.abiDefinition;
        var compiledUKGFAbi = compiledUKGF.info.abiDefinition;
        var newUKGF = web3.eth.contract(compiledUKGFAbi);
        newUKGF.new({from: primaryAddress, data: compiledUKGFCode}, function(err, newUKGFContract) {
            if (!err && newUKGFContract.address)
                console.log(newUKGFContract.address); 
        });
        var gasEstimation = web3.eth.estimateGas({
            data: compiledGameCode
        });
        gasEstimation = gasEstimation;
        console.log(gasEstimation);
        var newGame = web3.eth.contract(compiledGameAbi);
        var newGameContract = newGame.new([100, "GameName", "gm", 10, primaryAddress], 
                    {from: primaryAddress, 
                        data: compiledGameCode, 
                        gas: gasEstimation,
                        gasPrice: web3.toWei(500, "gwei")
                    }, function(err, newGameContract) {
            if (!err && newGameContract.address)
                console.log(newGameContract.address);
                game.gameAddress = newGameContract.address;
                console.log(game);
                 var Promise = promise.Promise;
        return new Promise(function (resolve, reject) {
            $.ajax({
                url: resourceUrl + "/" + game._id,
                data: JSON.stringify(game),
                method: "PUT",
                dataType: "json",
                contentType: "application/json",
                success: resolve,
                error: reject
            });

        });
            if(err)
                console.log(err);
        });

    }

    function callExampleContract(game, _callback) {
        compileContract(game);
        // addGameSmartContract(game)
        _callback();
    } 
    function addGameSmartContract(game){
        var shaObj = new Hash("SHA-1", "TEXT");
        shaObj.update(Math.random()+"");
        game.gameAddress = "0x"+shaObj.getHash("HEX");
        var Promise = promise.Promise;
                return new Promise(function (resolve, reject) {
                    $.ajax({
                        url: resourceUrl + "/" + game._id,
                        data: JSON.stringify(game),
                        method: "PUT",
                        dataType: "json",
                        contentType: "application/json",
                        success: resolve,
                        error: reject
                    });
                }); 
        return game;
    }
    function addGameContractSmartContract(game){
        var shaObj = new Hash("SHA-1", "TEXT");
        shaObj.update(game.contract+"");
        game.gameContractHash = "0x"+shaObj.getHash("HEX");
        return game;
    }

module.exports = {
    addGame: function (game) {
        var Promise = promise.Promise;
        return new Promise(function (resolve, reject) {
            $.ajax({
                url: resourceUrl,
                data: JSON.stringify(game),
                method: "POST",
                dataType: "json",
                contentType: "application/json",
                success: resolve,
                error: reject
            });
        });
    },
    getGame: function () {
        var Promise = promise.Promise;
        return new Promise(function (resolve, reject) {
            $.ajax({
                url: resourceUrl,
                method: "GET",
                dataType: "json",
                success: resolve,
                error: reject
            });
        });
    },
    deleteGame: function (game) {
        var Promise = promise.Promise;
        return new Promise(function (resolve, reject) {
            $.ajax({
                url: resourceUrl + "/" + game._id,
                method: "DELETE",
                dataType: "json",
                success: resolve,
                error: reject
            });
        });
    },
    addEquityToGame: function (game) {
        var Promise = promise.Promise;
        game = addGameSmartContract(game);
        return new Promise(function (resolve, reject) {
            $.ajax({
               url: resourceUrl,
                data: JSON.stringify(game),
                method: "PUT",
                dataType: "json",
                contentType: "application/json",
                success: resolve,
                error: reject
            });
        });
    },
    addContractToGame: function (game) {
        var Promise = promise.Promise;
        game = addGameContractSmartContract(game);
        console.log(game);
        return new Promise(function (resolve, reject) {
            $.ajax({
               url: resourceUrl,
                data: JSON.stringify(game),
                method: "PUT",
                dataType: "json",
                contentType: "application/json",
                success: resolve,
                error: reject
            });
        });
    },
    addGameToBlockchain: function(game){
        console.log("Game result: "+game)
        console.log("calling  game"+game);
        callExampleContract(game, function(){
            console.log("Game created");
            console.log(game);
        });
        var Promise = promise.Promise;
        return new Promise(function (resolve, reject) {
            $.ajax({
                url: resourceUrl + "/" + game._id,
                data: JSON.stringify(game),
                method: "PUT",
                dataType: "json",
                contentType: "application/json",
                success: resolve,
                error: reject
            });

        });
    },

}
